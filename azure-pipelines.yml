# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'e8b29042-27ec-468c-88ca-853de99d40f3'
  imageRepository: 'debasishspringbootmavencoursemicrosvc'
  containerRegistry: 'azacrjan23.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  HELM_EXPERIMENTAL_OCI: 1
  projectName: "maven-helm"
  helmChartVersion: $(build.sourceBranchName)
  helmfrom: $(Build.SourcesDirectory)/deploy/k8s/helm
  helmto: $(Build.ArtifactStagingDirectory)/deploy/k8s/helm

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
  
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
      SourceFolder: '$(system.defaultworkingdirectory)'
      Contents: '**/*.jar'
      TargetFolder: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
  
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - publish: $(build.artifactStagingDirectory)
      artifact: build-artifact
    - script: |
        helm registry login $(containerRegistry) --username $(acr.login.username) --password $(acr.login.password)
      displayName: login to acr using helm	
    - script: |
        helm save $(helm package mymavenapp/)
      displayName: save the chart and set the alias
    - script: |
        helm push mymavenapp-0.0.1.tgz
      displayName: push the chart to acr

      
