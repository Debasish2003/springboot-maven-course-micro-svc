# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'acr-sc'
  imageRepository: 'mavenpipeline'
  containerRegistry: 'acrnew09.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'mypipesecret'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        TargetFolder: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
    
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: Deploytodev
  displayName: Deploytodev
  dependsOn: Build
  jobs:
  - job: deploytodev
    displayName: deploytodev
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Pipeline Artifact'
      inputs:
        artifactName: drop
    - task: qetza.replacetokens.replacetokens-task.replacetokens@5
      displayName: 'Replace tokens in **/*.yaml'
      inputs:
        rootDirectory: '$(Pipeline.Workspace)'
        targetFiles: '**/springboot-dep-svc-new.yaml.yaml'
      
    - task: Kubernetes@0
      displayName: 'kubectl apply'
      inputs:
        kubernetesServiceConnection: 'kube-sc'
        namespace: default
        command: apply
        useConfigurationFile: true
        configuration: '$(Pipeline.Workspace)/**/springboot-dep-svc-new.yaml'
        azureSubscription: 'az-rm-sc'
        azureContainerRegistry: $(containerRegistry)
        secretName: mypipesecret
        forceUpdate: false 
      


    
    
  
          
            
            
         
          
